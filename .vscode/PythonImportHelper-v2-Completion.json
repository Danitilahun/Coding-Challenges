[
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "HuffmanTree",
        "importPath": "src.huffman.huffman_trees",
        "description": "src.huffman.huffman_trees",
        "isExtraImport": true,
        "detail": "src.huffman.huffman_trees",
        "documentation": {}
    },
    {
        "label": "HuffmanTree",
        "importPath": "src.huffman.huffman_trees",
        "description": "src.huffman.huffman_trees",
        "isExtraImport": true,
        "detail": "src.huffman.huffman_trees",
        "documentation": {}
    },
    {
        "label": "HuffmanTree",
        "importPath": "src.huffman.huffman_trees",
        "description": "src.huffman.huffman_trees",
        "isExtraImport": true,
        "detail": "src.huffman.huffman_trees",
        "documentation": {}
    },
    {
        "label": "CompressionUtils",
        "importPath": "src.utils.compression_utils",
        "description": "src.utils.compression_utils",
        "isExtraImport": true,
        "detail": "src.utils.compression_utils",
        "documentation": {}
    },
    {
        "label": "DecompressionUtils",
        "importPath": "src.utils.decompression_utils",
        "description": "src.utils.decompression_utils",
        "isExtraImport": true,
        "detail": "src.utils.decompression_utils",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "HuffmanNode",
        "importPath": "src.huffman.huffman_node",
        "description": "src.huffman.huffman_node",
        "isExtraImport": true,
        "detail": "src.huffman.huffman_node",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "HuffmanCoding",
        "importPath": "src.huffman.huffman_coding",
        "description": "src.huffman.huffman_coding",
        "isExtraImport": true,
        "detail": "src.huffman.huffman_coding",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "count_bytes_from_stream",
        "importPath": "ccwc_utils",
        "description": "ccwc_utils",
        "isExtraImport": true,
        "detail": "ccwc_utils",
        "documentation": {}
    },
    {
        "label": "count_chars_from_stream",
        "importPath": "ccwc_utils",
        "description": "ccwc_utils",
        "isExtraImport": true,
        "detail": "ccwc_utils",
        "documentation": {}
    },
    {
        "label": "count_words_and_lines_from_stream",
        "importPath": "ccwc_utils",
        "description": "ccwc_utils",
        "isExtraImport": true,
        "detail": "ccwc_utils",
        "documentation": {}
    },
    {
        "label": "create_parser",
        "kind": 2,
        "importPath": "command-line-app.todo",
        "description": "command-line-app.todo",
        "peekOfCode": "def create_parser():\n    parser = argparse.ArgumentParser(description=\"Command-line Todo List App\")\n    parser.add_argument(\"-a\", \"--add\", metavar=\"\", help=\"Add a new task\")\n    parser.add_argument(\"-l\", \"--list\", action=\"store_true\", help=\"List all tasks\")\n    parser.add_argument(\"-r\", \"--remove\", metavar=\"\", help=\"Remove a task by index\")\n    return parser\ndef add_task(task):\n    with open(TASK_FILE, \"a\") as file:\n        file.write(task + \"\\n\")\n    print(f\"Task added: {task}\")",
        "detail": "command-line-app.todo",
        "documentation": {}
    },
    {
        "label": "add_task",
        "kind": 2,
        "importPath": "command-line-app.todo",
        "description": "command-line-app.todo",
        "peekOfCode": "def add_task(task):\n    with open(TASK_FILE, \"a\") as file:\n        file.write(task + \"\\n\")\n    print(f\"Task added: {task}\")\ndef list_tasks():\n    if os.path.exists(TASK_FILE):\n        with open(TASK_FILE, \"r\") as file:\n            tasks = file.readlines()\n            if tasks:\n                print(\"Your tasks:\")",
        "detail": "command-line-app.todo",
        "documentation": {}
    },
    {
        "label": "list_tasks",
        "kind": 2,
        "importPath": "command-line-app.todo",
        "description": "command-line-app.todo",
        "peekOfCode": "def list_tasks():\n    if os.path.exists(TASK_FILE):\n        with open(TASK_FILE, \"r\") as file:\n            tasks = file.readlines()\n            if tasks:\n                print(\"Your tasks:\")\n                for index, task in enumerate(tasks, start=1):\n                    print(f\"{index}. {task.strip()}\")\n            else:\n                print(\"No tasks found.\")",
        "detail": "command-line-app.todo",
        "documentation": {}
    },
    {
        "label": "remove_task",
        "kind": 2,
        "importPath": "command-line-app.todo",
        "description": "command-line-app.todo",
        "peekOfCode": "def remove_task(index):\n    if os.path.exists(TASK_FILE):\n        with open(TASK_FILE, \"r\") as file:\n            tasks = file.readlines()\n        if 0 < index <= len(tasks):\n            removed_task = tasks.pop(index - 1).strip()\n            with open(TASK_FILE, \"w\") as file:\n                file.writelines(tasks)\n            print(f\"Task removed: {removed_task}\")\n        else:",
        "detail": "command-line-app.todo",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "command-line-app.todo",
        "description": "command-line-app.todo",
        "peekOfCode": "def main():\n    parser = create_parser()\n    args = parser.parse_args()\n    if args.add:\n        add_task(args.add)\n    elif args.list:\n        list_tasks()\n    elif args.remove:\n        try:\n            remove_task(int(args.remove))",
        "detail": "command-line-app.todo",
        "documentation": {}
    },
    {
        "label": "TASK_FILE",
        "kind": 5,
        "importPath": "command-line-app.todo",
        "description": "command-line-app.todo",
        "peekOfCode": "TASK_FILE = os.path.expanduser(\"~/.tasks.txt\")\ndef create_parser():\n    parser = argparse.ArgumentParser(description=\"Command-line Todo List App\")\n    parser.add_argument(\"-a\", \"--add\", metavar=\"\", help=\"Add a new task\")\n    parser.add_argument(\"-l\", \"--list\", action=\"store_true\", help=\"List all tasks\")\n    parser.add_argument(\"-r\", \"--remove\", metavar=\"\", help=\"Remove a task by index\")\n    return parser\ndef add_task(task):\n    with open(TASK_FILE, \"a\") as file:\n        file.write(task + \"\\n\")",
        "detail": "command-line-app.todo",
        "documentation": {}
    },
    {
        "label": "HuffmanCoding",
        "kind": 6,
        "importPath": "File_compressor_tool.src.huffman.huffman_coding",
        "description": "File_compressor_tool.src.huffman.huffman_coding",
        "peekOfCode": "class HuffmanCoding:\n    \"\"\"\n    Handles the compression and decompression processes using Huffman Coding.\n    Attributes:\n        file_path (str): The path to the file to compress or decompress.\n        tree (Optional[HuffmanTree]): The HuffmanTree instance used for encoding/decoding.\n    \"\"\"\n    def __init__(self, file_path: str):\n        \"\"\"\n        Initializes the HuffmanCoding instance with the specified file path.",
        "detail": "File_compressor_tool.src.huffman.huffman_coding",
        "documentation": {}
    },
    {
        "label": "HuffmanNode",
        "kind": 6,
        "importPath": "File_compressor_tool.src.huffman.huffman_node",
        "description": "File_compressor_tool.src.huffman.huffman_node",
        "peekOfCode": "class HuffmanNode:\n    \"\"\"\n    Represents a node in the Huffman Tree.\n    Attributes:\n        weight (int): The frequency of the character or the sum of frequencies for internal nodes.\n        element (Optional[str]): The character this node represents (None for internal nodes).\n        left (Optional[HuffmanNode]): The left child node.\n        right (Optional[HuffmanNode]): The right child node.\n    \"\"\"\n    def __init__(",
        "detail": "File_compressor_tool.src.huffman.huffman_node",
        "documentation": {}
    },
    {
        "label": "HuffmanTree",
        "kind": 6,
        "importPath": "File_compressor_tool.src.huffman.huffman_trees",
        "description": "File_compressor_tool.src.huffman.huffman_trees",
        "peekOfCode": "class HuffmanTree:\n    \"\"\"\n    Represents the Huffman Tree used for encoding and decoding.\n    Attributes:\n        frequencies (Dict[str, int]): Mapping of characters to their frequencies.\n        root (Optional[HuffmanNode]): The root node of the Huffman Tree.\n        code_table (Dict[str, str]): Mapping of characters to their Huffman codes.\n        reverse_code_table (Dict[str, str]): Mapping of Huffman codes to their characters.\n    \"\"\"\n    def __init__(self, frequencies: Dict[str, int]):",
        "detail": "File_compressor_tool.src.huffman.huffman_trees",
        "documentation": {}
    },
    {
        "label": "CompressionUtils",
        "kind": 6,
        "importPath": "File_compressor_tool.src.utils.compression_utils",
        "description": "File_compressor_tool.src.utils.compression_utils",
        "peekOfCode": "class CompressionUtils:\n    \"\"\"\n    Utility class containing methods related to the compression process in Huffman Coding.\n    \"\"\"\n    @staticmethod\n    def create_frequency_dict(text: str) -> Dict[str, int]:\n        \"\"\"\n        Creates a frequency dictionary mapping each character in the text to its frequency.\n        Args:\n            text (str): The input text for which the frequency map is to be created.",
        "detail": "File_compressor_tool.src.utils.compression_utils",
        "documentation": {}
    },
    {
        "label": "DecompressionUtils",
        "kind": 6,
        "importPath": "File_compressor_tool.src.utils.decompression_utils",
        "description": "File_compressor_tool.src.utils.decompression_utils",
        "peekOfCode": "class DecompressionUtils:\n    \"\"\"\n    Utility class containing methods related to the decompression process in Huffman Coding.\n    \"\"\"\n    @staticmethod\n    def remove_padding(padded_encoded_text: str) -> str:\n        \"\"\"\n        Removes the padding from the encoded text.\n        Args:\n            padded_encoded_text (str): The padded binary string.",
        "detail": "File_compressor_tool.src.utils.decompression_utils",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "File_compressor_tool.main",
        "description": "File_compressor_tool.main",
        "peekOfCode": "def main():\n    \"\"\"\n    The main function that parses command-line arguments and performs compression or decompression.\n    \"\"\"\n    parser = argparse.ArgumentParser(description=\"Huffman Coding Compression and Decompression Tool\")\n    subparsers = parser.add_subparsers(dest='action', help='Action to perform')\n    compress_parser = subparsers.add_parser('compress', help='Compress a file')\n    compress_parser.add_argument('input_filename', type=str, help='Path to the input file to compress')\n    compress_parser.add_argument('output_filename', type=str, help='Path to save the compressed file')\n    decompress_parser = subparsers.add_parser('decompress', help='Decompress a file')",
        "detail": "File_compressor_tool.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "JSON_Parser.json_validator",
        "description": "JSON_Parser.json_validator",
        "peekOfCode": "def main():\n    if len(sys.argv) != 2:\n        print(\"Usage: python json_from_args.py <filename>\")\n        sys.exit(1)\n    filename = sys.argv[1]\n    try:\n        with open(filename, 'r') as file:\n            input_str = file.read()\n        print(\"Input JSON string:\")\n        print(input_str[1])",
        "detail": "JSON_Parser.json_validator",
        "documentation": {}
    },
    {
        "label": "JSON_TOKENS",
        "kind": 5,
        "importPath": "JSON_Parser.main",
        "description": "JSON_Parser.main",
        "peekOfCode": "JSON_TOKENS = {\n    \"{\": \"LEFT_BRACE\",\n    \"}\": \"RIGHT_BRACE\",\n    \"[\": \"LEFT_BRACKET\",\n    \"]\": \"RIGHT_BRACKET\",\n    \",\": \"COMMA\",\n    \":\": \"COLON\",\n    \"true\": \"BOOLEAN_TRUE\",\n    \"false\": \"BOOLEAN_FALSE\",\n    \"null\": \"NULL\",",
        "detail": "JSON_Parser.main",
        "documentation": {}
    },
    {
        "label": "Quadtree",
        "kind": 6,
        "importPath": "Quadtree.quadtree_polygon_search",
        "description": "Quadtree.quadtree_polygon_search",
        "peekOfCode": "class Quadtree:\n    def __init__(self, boundary, capacity):\n        self.boundary = boundary \n        self.capacity = capacity\n        self.points = []\n        self.divided = False\n    def insert(self, point):\n        if not self.contains_point(point):\n            return False\n        if len(self.points) < self.capacity:",
        "detail": "Quadtree.quadtree_polygon_search",
        "documentation": {}
    },
    {
        "label": "search_quadtree_for_polygon",
        "kind": 2,
        "importPath": "Quadtree.quadtree_polygon_search",
        "description": "Quadtree.quadtree_polygon_search",
        "peekOfCode": "def search_quadtree_for_polygon(node, polygon, found_points=None):\n    if found_points is None:\n        found_points = []\n    node_rect = Polygon([\n        (node.boundary[0], node.boundary[1]),\n        (node.boundary[0] + node.boundary[2], node.boundary[1]),\n        (node.boundary[0] + node.boundary[2], node.boundary[1] + node.boundary[3]),\n        (node.boundary[0], node.boundary[1] + node.boundary[3])\n    ])\n    if not polygon.intersects(node_rect):",
        "detail": "Quadtree.quadtree_polygon_search",
        "documentation": {}
    },
    {
        "label": "onclick",
        "kind": 2,
        "importPath": "Quadtree.quadtree_polygon_search",
        "description": "Quadtree.quadtree_polygon_search",
        "peekOfCode": "def onclick(event):\n    if event.inaxes != ax:\n        return\n    polygon_points.append((event.xdata, event.ydata))\n    plt.plot(*zip(*polygon_points), marker='o', color='green')\n    plt.draw()\ndef onkey(event):\n    if event.key == \"enter\" and len(polygon_points) > 2:\n        polygon = Polygon(polygon_points)\n        points_in_polygon = search_quadtree_for_polygon(quadtree, polygon)",
        "detail": "Quadtree.quadtree_polygon_search",
        "documentation": {}
    },
    {
        "label": "onkey",
        "kind": 2,
        "importPath": "Quadtree.quadtree_polygon_search",
        "description": "Quadtree.quadtree_polygon_search",
        "peekOfCode": "def onkey(event):\n    if event.key == \"enter\" and len(polygon_points) > 2:\n        polygon = Polygon(polygon_points)\n        points_in_polygon = search_quadtree_for_polygon(quadtree, polygon)\n        poly_x, poly_y = zip(*polygon_points, polygon_points[0])\n        plt.plot(poly_x, poly_y, color=\"green\", linestyle=\"-\", linewidth=2, label=\"Polygon\")\n        if points_in_polygon:\n            plt.scatter(*zip(*points_in_polygon), color=\"red\", label=\"Points Inside Polygon\")\n        plt.title(\"Points Inside Polygon\")\n        plt.legend()",
        "detail": "Quadtree.quadtree_polygon_search",
        "documentation": {}
    },
    {
        "label": "boundary",
        "kind": 5,
        "importPath": "Quadtree.quadtree_polygon_search",
        "description": "Quadtree.quadtree_polygon_search",
        "peekOfCode": "boundary = (0, 0, 100, 100)\ncapacity = 4\nquadtree = Quadtree(boundary, capacity)\nnp.random.seed(0)\npoints = [(np.random.uniform(0, 100), np.random.uniform(0, 100)) for _ in range(20)]\nfor point in points:\n    quadtree.insert(point)\nfig, ax = plt.subplots(figsize=(8, 8))\nax.set_xlim(0, 100)\nax.set_ylim(0, 100)",
        "detail": "Quadtree.quadtree_polygon_search",
        "documentation": {}
    },
    {
        "label": "capacity",
        "kind": 5,
        "importPath": "Quadtree.quadtree_polygon_search",
        "description": "Quadtree.quadtree_polygon_search",
        "peekOfCode": "capacity = 4\nquadtree = Quadtree(boundary, capacity)\nnp.random.seed(0)\npoints = [(np.random.uniform(0, 100), np.random.uniform(0, 100)) for _ in range(20)]\nfor point in points:\n    quadtree.insert(point)\nfig, ax = plt.subplots(figsize=(8, 8))\nax.set_xlim(0, 100)\nax.set_ylim(0, 100)\nplt.scatter(*zip(*points), color=\"blue\", label=\"All Points\")",
        "detail": "Quadtree.quadtree_polygon_search",
        "documentation": {}
    },
    {
        "label": "quadtree",
        "kind": 5,
        "importPath": "Quadtree.quadtree_polygon_search",
        "description": "Quadtree.quadtree_polygon_search",
        "peekOfCode": "quadtree = Quadtree(boundary, capacity)\nnp.random.seed(0)\npoints = [(np.random.uniform(0, 100), np.random.uniform(0, 100)) for _ in range(20)]\nfor point in points:\n    quadtree.insert(point)\nfig, ax = plt.subplots(figsize=(8, 8))\nax.set_xlim(0, 100)\nax.set_ylim(0, 100)\nplt.scatter(*zip(*points), color=\"blue\", label=\"All Points\")\nplt.xlabel(\"X\")",
        "detail": "Quadtree.quadtree_polygon_search",
        "documentation": {}
    },
    {
        "label": "points",
        "kind": 5,
        "importPath": "Quadtree.quadtree_polygon_search",
        "description": "Quadtree.quadtree_polygon_search",
        "peekOfCode": "points = [(np.random.uniform(0, 100), np.random.uniform(0, 100)) for _ in range(20)]\nfor point in points:\n    quadtree.insert(point)\nfig, ax = plt.subplots(figsize=(8, 8))\nax.set_xlim(0, 100)\nax.set_ylim(0, 100)\nplt.scatter(*zip(*points), color=\"blue\", label=\"All Points\")\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\nplt.title(\"Click to Define Polygon Vertices. Press Enter to Finish.\")",
        "detail": "Quadtree.quadtree_polygon_search",
        "documentation": {}
    },
    {
        "label": "polygon_points",
        "kind": 5,
        "importPath": "Quadtree.quadtree_polygon_search",
        "description": "Quadtree.quadtree_polygon_search",
        "peekOfCode": "polygon_points = []\ndef onclick(event):\n    if event.inaxes != ax:\n        return\n    polygon_points.append((event.xdata, event.ydata))\n    plt.plot(*zip(*polygon_points), marker='o', color='green')\n    plt.draw()\ndef onkey(event):\n    if event.key == \"enter\" and len(polygon_points) > 2:\n        polygon = Polygon(polygon_points)",
        "detail": "Quadtree.quadtree_polygon_search",
        "documentation": {}
    },
    {
        "label": "cid_click",
        "kind": 5,
        "importPath": "Quadtree.quadtree_polygon_search",
        "description": "Quadtree.quadtree_polygon_search",
        "peekOfCode": "cid_click = fig.canvas.mpl_connect('button_press_event', onclick)\ncid_key = fig.canvas.mpl_connect('key_press_event', onkey)\nplt.show()",
        "detail": "Quadtree.quadtree_polygon_search",
        "documentation": {}
    },
    {
        "label": "cid_key",
        "kind": 5,
        "importPath": "Quadtree.quadtree_polygon_search",
        "description": "Quadtree.quadtree_polygon_search",
        "peekOfCode": "cid_key = fig.canvas.mpl_connect('key_press_event', onkey)\nplt.show()",
        "detail": "Quadtree.quadtree_polygon_search",
        "documentation": {}
    },
    {
        "label": "create_parser",
        "kind": 2,
        "importPath": "word_count.ccwc",
        "description": "word_count.ccwc",
        "peekOfCode": "def create_parser():\n    parser = argparse.ArgumentParser(\n        description=\"Command-line Word Counter Tool\")\n    parser.add_argument(\"-c\", \"--bytes\", action=\"store_true\",\n                        help=\"Outputs the number of bytes in the file or input\")\n    parser.add_argument(\"-m\", \"--chars\", action=\"store_true\",\n                        help=\"Outputs the number of characters in the file or input\")\n    parser.add_argument(\"-w\", \"--words\", action=\"store_true\",\n                        help=\"Outputs the number of words in the file or input\")\n    parser.add_argument(\"-l\", \"--lines\", action=\"store_true\",",
        "detail": "word_count.ccwc",
        "documentation": {}
    },
    {
        "label": "process_input",
        "kind": 2,
        "importPath": "word_count.ccwc",
        "description": "word_count.ccwc",
        "peekOfCode": "def process_input(input_stream, args):\n    line_count = word_count = byte_count = char_count = 0\n    if args.lines or args.words:\n        line_count, word_count = count_words_and_lines_from_stream(input_stream)\n        if line_count == -1 or word_count == -1:\n            return\n    input_stream.seek(0)\n    if args.bytes:\n        byte_count = count_bytes_from_stream(input_stream)\n        if byte_count == -1:",
        "detail": "word_count.ccwc",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "word_count.ccwc",
        "description": "word_count.ccwc",
        "peekOfCode": "def main():\n    parser = create_parser()\n    args = parser.parse_args()\n    if not (args.bytes or args.chars or args.words or args.lines):\n        args.bytes = args.words = args.lines = True\n    if args.filename:\n        if not os.path.exists(args.filename):\n            print(f\"Error: File '{args.filename}' does not exist.\")\n            return\n        with open(args.filename, 'rb') as f:",
        "detail": "word_count.ccwc",
        "documentation": {}
    },
    {
        "label": "count_bytes_from_stream",
        "kind": 2,
        "importPath": "word_count.ccwc_utils",
        "description": "word_count.ccwc_utils",
        "peekOfCode": "def count_bytes_from_stream(stream):\n    byte_count = 0\n    try:\n        while chunk := stream.read(8192):\n            byte_count += len(chunk)\n    except Exception as e:\n        print(f\"Error reading input for byte count: {e}\")\n        return -1\n    return byte_count\ndef count_chars_from_stream(stream):",
        "detail": "word_count.ccwc_utils",
        "documentation": {}
    },
    {
        "label": "count_chars_from_stream",
        "kind": 2,
        "importPath": "word_count.ccwc_utils",
        "description": "word_count.ccwc_utils",
        "peekOfCode": "def count_chars_from_stream(stream):\n    try:\n        content = stream.read()\n        return len(content.decode('utf-8', errors='replace'))\n    except Exception as e:\n        print(f\"Error reading input for character count: {e}\")\n        return -1\ndef count_words_and_lines_from_stream(stream):\n    try:\n        lines = stream.readlines()",
        "detail": "word_count.ccwc_utils",
        "documentation": {}
    },
    {
        "label": "count_words_and_lines_from_stream",
        "kind": 2,
        "importPath": "word_count.ccwc_utils",
        "description": "word_count.ccwc_utils",
        "peekOfCode": "def count_words_and_lines_from_stream(stream):\n    try:\n        lines = stream.readlines()\n        words = sum(len(line.split()) for line in lines)\n        return len(lines), words\n    except Exception as e:\n        print(f\"Error reading input for word/line count: {e}\")\n        return -1, -1",
        "detail": "word_count.ccwc_utils",
        "documentation": {}
    }
]